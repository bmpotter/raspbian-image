#!/bin/bash

loud() {
  local msg="++ Horizon firstboot: $1"
  if [ -e "/dev/ttyAMA0" ]; then
    echo -e "$msg" > /dev/ttyAMA0
  elif [ -e "/dev/ttyS0" ]; then
    echo -e "$msg" > /dev/ttyS0
  fi
  echo -e "$msg" > /dev/tty1
  echo -e "$msg" | logger -t horizon-configure
}

exists() {
  [ -d "/opt/hzn" ]
  echo $?
}

reachable() {
  host bluehorizon.network > /dev/null 2>&1
  echo $?
}

if  [ -e /var/horizon/.firstboot ]; then
  if [ "$(exists bluehorizon)" != 0 ]; then
    # do install
    loud 'Installing Blue Horizon (this may take a few mins)'

    start=$(date +%s)
    evalct=0
    until [ "$(reachable)" == 0 ]; do
      sleep 20

      if [ $((evalct % 3)) -eq 0 ]; then
        loud "Ubuntu store unavailable, probably because this device is not connected to a network. Checking back again in a few seconds. This procedure will continue indefinitely; if you'd like to suspend the firstboot setup process, execute 'systemctl stop horizon-configure'. It will be re-executed on reboot."
      fi

      evalct=$((evalct+1))
    done

    until [ $(exists bluehorizon) == 0 ]; do
      mkdir -p /opt/hzn

      wget -O /tmp/bluehorizon-bundle.tar.bz2 'https://tor01.objectstorage.softlayer.net/v1/AUTH_bd05f276-e42f-4fa1-b7b3-780e8544769f/bluehorizon-bundle/bluehorizon-2.0.2-bundle-armhf.tar.bz2?temp_url_sig=c25d8a5829574334dda001fef29257ac40ffde8d&temp_url_expires=1522866944'

      tar xjf /tmp/bluehorizon-bundle.tar.bz2 -C /

      start=$(date +%s)
      if [ $((start - $(date +%s))) -gt 120 ]; then
        loud 'ERROR: Unable to install Blue Horizon bundle.'
        continue 2
      fi
    done

    systemctl daemon-reload && systemctl enable bluehorizon.anax.service && systemctl start bluehorizon.anax.service

    loud 'Successfully installed Blue Horizon bundle and started services.'
	fi
else
  # firstboot stuff

  loud 'Starting firstboot configuration'
  #ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf

  #dpkg --configure -a

  loud 'Growing root partition'
  bash -x /usr/local/sbin/resize-root

  loud 'Generating SSH host keys'
  dpkg-reconfigure openssh-server

  device_id=$(cat /proc/cpuinfo | grep Serial | head -1 | awk '{print $NF}')
  if [ "$?" != 0 ] || [ "$device_id" == "" ]; then
    # can't use this for device id, use mac address of interface instead
    device_id=$(echo $(sha1sum <(ip -o link show $(basename $(ls -d /proc/sys/net/ipv4/conf/[we]* | head -n1)) | grep -oP "link/ether \K([:\b\w]+) ")) | awk '{print $1}')
    if [ "$?" != 0 ] || [ "$device_id" == "" ]; then
      # couldn't use the MAC, using a random string
      device_id=$(< /dev/urandom tr -dc A-Za-z0-9 | head -c${1:-32};echo)
    fi
  fi

  NEW_HOSTNAME=horizon-$device_id
  echo -e "\n127.0.1.1        ${NEW_HOSTNAME}" >> /etc/hosts
  echo "${NEW_HOSTNAME}" > /etc/hostname

  loud "Set hostname to $NEW_HOSTNAME"

  MIN=$((RANDOM % 60))
  HOUR0=$((RANDOM % 24))
  for i in {1..3}; do export HOUR${i}="$(( ($HOUR0+($i*6)) %24))"; done
  echo "0    3 * * *   root    find /var/log/workload -iname "*.gz" -mtime +32 -print0 | xargs -0 rm -f" >> /etc/crontab
  echo "30   3 * * *   root    find /var/log/workload -mtime +2 -size 0 -print0 | xargs -0 rm -f" >> /etc/crontab

  mkdir -p /var/horizon/config

  echo "$device_id" > /var/horizon/config/device_id
  touch /var/horizon/.firstboot

  loud 'Firstboot setup procedure complete, rebooting'
  systemctl reboot
fi
